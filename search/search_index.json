{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jaxonloader A blazingly fast \u26a1\ufe0f dataloader for JAX that no one asked for, but here it is anyway. Yet another dataloader? Why... Yes, it's true: the world may not need another dataloader, but I got tired of converting Torch tensors to JAX arrays and having this overhead everytime I want to train a model. So I decided: No more of that! It has to change! Ok, but what does this do? In essence, Jaxonloader is simply a very thin layer around a JAX array. The idea is that you first analyse and preprocess your data using Polars or Pandas and once you have a DataFrame you're happy with and want to start training your model only then comes Jaxonloader into play. You generate a JaxonDataset from a DataFrame and pass that into a JaxonDataLoader . The dataloader itself can be JITted, giving us a massive speedbost in training. So all you're doing is iterating over a JAX array? Yes. Do you really need more than that? I guess you're right. ...Wait it's faster? How much? Since we can JIT the dataloader, we can have a 31x increase in iteration time over the PyTorch dataloader.","title":"Home"},{"location":"#jaxonloader","text":"A blazingly fast \u26a1\ufe0f dataloader for JAX that no one asked for, but here it is anyway.","title":"Jaxonloader"},{"location":"#yet-another-dataloader-why","text":"Yes, it's true: the world may not need another dataloader, but I got tired of converting Torch tensors to JAX arrays and having this overhead everytime I want to train a model. So I decided: No more of that! It has to change!","title":"Yet another dataloader? Why..."},{"location":"#ok-but-what-does-this-do","text":"In essence, Jaxonloader is simply a very thin layer around a JAX array. The idea is that you first analyse and preprocess your data using Polars or Pandas and once you have a DataFrame you're happy with and want to start training your model only then comes Jaxonloader into play. You generate a JaxonDataset from a DataFrame and pass that into a JaxonDataLoader . The dataloader itself can be JITted, giving us a massive speedbost in training.","title":"Ok, but what does this do?"},{"location":"#so-all-youre-doing-is-iterating-over-a-jax-array","text":"Yes. Do you really need more than that?","title":"So all you're doing is iterating over a JAX array?"},{"location":"#i-guess-youre-right-wait-its-faster-how-much","text":"Since we can JIT the dataloader, we can have a 31x increase in iteration time over the PyTorch dataloader.","title":"I guess you're right. ...Wait it's faster? How much?"},{"location":"api/","text":"jaxonloader.dataloader.JaxonDataLoader Note, this class is not meant to be used directly. Instead, use the jaxonloader.dataloader.make function to create a JaxonDataLoader with an index ! Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (PRNGKey): The key to use for shuffling. If no shuffling is done, this key is not used. jaxonloader.dataloader.make Creates a JaxonDataLoader or a JITJaxonDataLoader depending on the jit argument as well as an index state. Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (PRNGKeyArray): The key to use for shuffling. If no shuffling is done, this key is not used. jit (bool): Whether to JIT compile the data loader (recommended). Returns: If jit is True , returns a tuple of a JITJaxonDataLoader and a jaxonloader.dataloader.Index . If jit is False , returns a tuple of a JaxonDataLoader and a jaxonloader.dataloader.Index . from jaxonloader.dataloader import make, from_dataframe import pandas as pd df = pd.read_csv('data.csv') dataset = from_dataframe(df) jaxon_dataloader, index = make(dataset, batch_size=32, shuffle=True, drop_last=True, key=jax.random.PRNGKey(0), jit=True) while it := jaxon_dataloader(index): x, index, done = it if done: break","title":"API"},{"location":"api/#jaxonloaderdataloaderjaxondataloader","text":"Note, this class is not meant to be used directly. Instead, use the jaxonloader.dataloader.make function to create a JaxonDataLoader with an index ! Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (PRNGKey): The key to use for shuffling. If no shuffling is done, this key is not used.","title":"jaxonloader.dataloader.JaxonDataLoader"},{"location":"api/#jaxonloaderdataloadermake","text":"Creates a JaxonDataLoader or a JITJaxonDataLoader depending on the jit argument as well as an index state. Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (PRNGKeyArray): The key to use for shuffling. If no shuffling is done, this key is not used. jit (bool): Whether to JIT compile the data loader (recommended). Returns: If jit is True , returns a tuple of a JITJaxonDataLoader and a jaxonloader.dataloader.Index . If jit is False , returns a tuple of a JaxonDataLoader and a jaxonloader.dataloader.Index . from jaxonloader.dataloader import make, from_dataframe import pandas as pd df = pd.read_csv('data.csv') dataset = from_dataframe(df) jaxon_dataloader, index = make(dataset, batch_size=32, shuffle=True, drop_last=True, key=jax.random.PRNGKey(0), jit=True) while it := jaxon_dataloader(index): x, index, done = it if done: break","title":"jaxonloader.dataloader.make"},{"location":"future/","text":"The Future plans for Jaxonloader Jaxonloader is still a small baby, but it has big dreams. At its core, I think, we will keep the DataFrame -> JaxonDataset -> JaxonDataLoader pipeline. In terms of additional features, I'm thinking about not adding any preprocessing steps, i.e. BYOPP (bring your own preprocessing). On the other hand, it'd be nice if we could add all kinds of \"standard\" ML datasets, decoupling ourselves from the PyTorch dataloader.","title":"Future"},{"location":"future/#the-future-plans-for-jaxonloader","text":"Jaxonloader is still a small baby, but it has big dreams. At its core, I think, we will keep the DataFrame -> JaxonDataset -> JaxonDataLoader pipeline. In terms of additional features, I'm thinking about not adding any preprocessing steps, i.e. BYOPP (bring your own preprocessing). On the other hand, it'd be nice if we could add all kinds of \"standard\" ML datasets, decoupling ourselves from the PyTorch dataloader.","title":"The Future plans for Jaxonloader"},{"location":"getting-started/","text":"Installation Install this package using pip like so: pip install jaxonloader Usage The intended way to use Jaxonloader is the following: You start with a DataFrame You preprocess your data in that DataFrame You convert that DataFrame into a JaxonDataset You pass that JaxonDataset into a JaxonDataLoader ??? Profit Here's an example: import pandas as pd from jaxonloader import make, from_dataframe # Step 1 df = pd.read_csv('data.csv') # Step 2 df['column'] = df['column'].apply(lambda x: x + 1) # Step 3 jaxon_dataset = from_dataframe(df) # Step 4 jaxon_dataloader, state = make( jaxon_dataset, batch_size=64, shuffle=True, key=subkey, jit=True ) # Step 5 while it := jaxon_dataloader(state): x, state, done = it if done: break # Step 6 print('Profit!')","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install this package using pip like so: pip install jaxonloader","title":"Installation"},{"location":"getting-started/#usage","text":"The intended way to use Jaxonloader is the following: You start with a DataFrame You preprocess your data in that DataFrame You convert that DataFrame into a JaxonDataset You pass that JaxonDataset into a JaxonDataLoader ??? Profit Here's an example: import pandas as pd from jaxonloader import make, from_dataframe # Step 1 df = pd.read_csv('data.csv') # Step 2 df['column'] = df['column'].apply(lambda x: x + 1) # Step 3 jaxon_dataset = from_dataframe(df) # Step 4 jaxon_dataloader, state = make( jaxon_dataset, batch_size=64, shuffle=True, key=subkey, jit=True ) # Step 5 while it := jaxon_dataloader(state): x, state, done = it if done: break # Step 6 print('Profit!')","title":"Usage"}]}