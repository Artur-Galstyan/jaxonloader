{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jaxonloader A dataloader that no one asked for, but here it is anyway. Yet another dataloader? Why... Yes, it's true: the world may not need another dataloader, but I got tired of converting Torch tensors to JAX arrays and having this overhead everytime I want to train a model. So I decided to instead convert Numpy arrays to JAX and not having to do tensor.numpy() everytime I want to use the data. Ok, but what does this do? It's a dataloader that is effectively the same as the PyTorch dataloader, except that it uses Numpy as the backend. So all you're doing is iterating over an array? Yes. Do you really need more than that?","title":"Home"},{"location":"#jaxonloader","text":"A dataloader that no one asked for, but here it is anyway.","title":"Jaxonloader"},{"location":"#yet-another-dataloader-why","text":"Yes, it's true: the world may not need another dataloader, but I got tired of converting Torch tensors to JAX arrays and having this overhead everytime I want to train a model. So I decided to instead convert Numpy arrays to JAX and not having to do tensor.numpy() everytime I want to use the data.","title":"Yet another dataloader? Why..."},{"location":"#ok-but-what-does-this-do","text":"It's a dataloader that is effectively the same as the PyTorch dataloader, except that it uses Numpy as the backend.","title":"Ok, but what does this do?"},{"location":"#so-all-youre-doing-is-iterating-over-an-array","text":"Yes. Do you really need more than that?","title":"So all you're doing is iterating over an array?"},{"location":"api/","text":"jaxonloader.dataloader.JaxonDataLoader Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (int): The key to use for shuffling. If no shuffling is done, this key is not used.","title":"API"},{"location":"api/#jaxonloaderdataloaderjaxondataloader","text":"Arguments: dataset (JaxonDataset): The dataset to load data from. batch_size (int): The size of the batch to load. shuffle (bool): Whether to shuffle the data. drop_last (bool): Whether to drop the last batch if it's smaller than batch_size . key (int): The key to use for shuffling. If no shuffling is done, this key is not used.","title":"jaxonloader.dataloader.JaxonDataLoader"},{"location":"future/","text":"The Future plans for Jaxonloader Jaxonloader is still a small baby, but it has big dreams. And at some point, I'll tell you all about them.","title":"Future"},{"location":"future/#the-future-plans-for-jaxonloader","text":"Jaxonloader is still a small baby, but it has big dreams. And at some point, I'll tell you all about them.","title":"The Future plans for Jaxonloader"},{"location":"getting-started/","text":"Installation Install this package using pip like so: pip install jaxonloader Usage It's quite similar to the PyTorch dataloader. Create a dataset which inherits from jaxonloader.JaxonDataset . Implement all the abstract methods. Create a dataloader using jaxonloader.JaxonDataLoader . Iterate over the dataloader. ??? Profit! Here's an example: import pandas as pd from jaxonloader import make, from_dataframe # Step 1 df = pd.read_csv('data.csv') # Step 2 df['column'] = df['column'].apply(lambda x: x + 1) # Step 3 jaxon_dataset = from_dataframe(df) # Step 4 jaxon_dataloader = JaxonDataLoader( jaxon_dataset, batch_size=64, shuffle=True, key=subkey, jit=True ) # Step 5 for x in jaxon_dataloader: pass # Step 6 print('Profit!')","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install this package using pip like so: pip install jaxonloader","title":"Installation"},{"location":"getting-started/#usage","text":"It's quite similar to the PyTorch dataloader. Create a dataset which inherits from jaxonloader.JaxonDataset . Implement all the abstract methods. Create a dataloader using jaxonloader.JaxonDataLoader . Iterate over the dataloader. ??? Profit! Here's an example: import pandas as pd from jaxonloader import make, from_dataframe # Step 1 df = pd.read_csv('data.csv') # Step 2 df['column'] = df['column'].apply(lambda x: x + 1) # Step 3 jaxon_dataset = from_dataframe(df) # Step 4 jaxon_dataloader = JaxonDataLoader( jaxon_dataset, batch_size=64, shuffle=True, key=subkey, jit=True ) # Step 5 for x in jaxon_dataloader: pass # Step 6 print('Profit!')","title":"Usage"}]}